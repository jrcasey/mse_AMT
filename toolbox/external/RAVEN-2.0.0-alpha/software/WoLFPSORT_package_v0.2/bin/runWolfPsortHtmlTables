#!/usr/bin/perl -w
#  Author: Paul B. Horton (remnants of code from CJ Collier may remain).
#  Maintainer: Paul B. Horton.
#  Organization: Computational Biology Research Center, AIST, Japan
#  Creation Date: Summer 2004
#  Last Modification $Date: 2006/08/26 10:33:23 $
#  Copyright: Paul Horton
#  License: See the WoLF PSORT License
#
#  Description: runWolfPsortHtmlTables runs:
#
#               1. WoLF PSORT
#               2. PSORT II
#               3. A global sequence alignment program by Paul Horton.
#
#               and provides output in html form.
#
#  Input: (multi)fasta input from standard in.
#
#  Args: 1. organism type from {fungi, plant, animal}
#
#        2. output directory, $outputDir
#
#        3. name of the query to use for output. The default is
#           "query".
#
#  Output: The output is written to $outputDir/htdocs/results/
#          and $outputDir/htdocs/WoLFPSORTdoc/
#          Unfortunately, at this point "htdocs/results" and
#          "htdocs/WoLFPSORTdoc" are hard coded.
#
#          The directories under $outputDir are created if necessary.
#
#  Dependencies: This program depends on some files included in the
#                installation in its directory, in $cwd/../data and in
#                $cwd/../htdocs/WoLFPSORTdoc/. It also needs $cwd/tmp for
#                temporary storage. $cwd refers to the "bin" directory that
#                this file should be in.
#
#                This program uses the FindBin module to find its absolute
#                path ($cwd), so you should be able to install it anywhere 
#                if you maintain the relative paths of the files it depends
#                on.
# 
#  See Also: pod documentation at the bottom of this file.
#

# load FindBin in BEGIN block to enable modules, in this case fastafmt::GetOptWarnHandler,
# to be loaded from pathnames relative to where this file is.
BEGIN{  
    use FindBin;
    push @INC, $FindBin::Bin;
}
use Getopt::Long qw(:config posix_default bundling);
use Pod::Usage;
use FileHandle;
use File::Basename;
use fastafmt::GetOptWarnHandler;
use strict;

my $cwd = $FindBin::Bin;

##          old usage message from before I knew about Pod::Usage 
# my $usage = "Usage: $0 [-n] [-preserveTemporaryFiles] organismType outputDir [queryName]\n"
#     . "\n\n  organismType should be one of {\"fungi\", \"plant\", \"animal\"}\n"
#     . "\n  queryName is used to refer to the query in the output and defaults to \"query\"\n"
#     . "\n  pipe (multi)fasta query sequences in from standard in\n"
#     . "\n  -n    means just print commands instead of executing\n"
#     . "\n  -preserveTemporaryFiles   means do not remove temporary files (for debugging)\n";


# command line determined options
my $justComputeFeatures = 0;
my $justPrint = 0; # Just print commands, don't execute.
my $psortVerboseOutput = 1;
my $psortVerbosePredictionFlag = "";
my $wolfFlag = "";
my $preserveTemporaryFiles = 0; # default (0) means remove temporary files.

my $man = 0;
my $help = 0;
my $usage = 0;

fastafmt::GetOptWarnHandler->before( @ARGV );
my $getOptionsRetval =
    GetOptions( "n|just-print" => \$justPrint,
		"p|preserve-temporary-files" => \$preserveTemporaryFiles,
		"f|just-print-features" => \$justComputeFeatures,
		"no-classical-psort-prediction"
		=> sub { $psortVerbosePredictionFlag = "--noPSORTIIprediction"; },
		"no-classical-psort-verbose-output"
		=> sub { $psortVerboseOutput = 0;
			 $wolfFlag = "--no-classical-psort-verbose-output"; },
		"man"          => \$man,
		"help"         => \$help,
		"usage"        => \$usage,
		);
fastafmt::GetOptWarnHandler->after( @ARGV );

$getOptionsRetval || pod2usage( -verbose => 0 );

####################################################
# Process flags related to usage or documentation
####################################################
$man     && pod2usage( -verbose => 2 );
$help    && pod2usage( -verbose => 1 );
$usage   && pod2usage( -verbose => 0 );

($#ARGV > 0) || pod2usage( -verbose => 0 );
my $organismType = shift;
$organismType || die "$usage\n";
unless( $organismType =~ /^(fungi|plant|animal)$/ ){
    print "Error: expected \"fungi\", \"plant\", or \"animal\" but got \"$organismType\"\n";
    die "$usage\n";
}

# check to make sure classical PSORT dbm files are present if needed.
unless( ($psortVerbosePredictionFlag =~ /--noPSORTIIprediction/)
	|| ($wolfFlag =~ /--no-classical-psort-verbose-output/) ){
    unless(  ( -e "$cwd/psortModifiedForWolfFiles/attribute.dir" )
	     || ( -e "$cwd/psortModifiedForWolfFiles/attribute" )  ){
	die( 
q"Error: psort classical predictions expects a dbm file:
psortModifiedForWolfFiles/attribute.dir or
psortModifiedForWolfFiles/attribute, but cannot find it.
Your choices are:

1. create the dbm files with:
  % cd bin/psortModifiedForWolfFiles
  % ./psortModifiedForWoLF -t all.seq

2. Run this program  with --no-classical-psort-prediction or
   --no-classical-psort-verbose-output options
" );
    }
}


my $outputDir = shift;
$outputDir || die "$usage\n";
unless( -e $outputDir ){
    $justPrint || die "Error: output directory \"$outputDir\" does not exist\n";
    print "Warning: output directory \"$outputDir\" does not exist\n";
}


my $baseName = shift;
$baseName || ($baseName = "query");
my $baseNameRegexp = "^[a-zA-Z0-9_.-]+\$";
($baseName =~ /$baseNameRegexp/) || die "Error: To prevent various possible downstream bugs and perl security issues, the query name is limited to alphanumerics and \"[_.-]\"\nthe query name I just choked on was: \"$baseName\", which does not match $baseNameRegexp\n";

# directories
my $dataDir = "$cwd/../data/";
my $docSrcDir = "$cwd/../htdocs/WoLFPSORTdoc/";
my $tmpDir = "$cwd/tmp/";
my $htdocsDir = "$outputDir/htdocs"; # no trailing '/' to please WoLFPSORTpredictAndAlign.
my $resultsDir = "$htdocsDir/results/";
my $docDestDir = "$htdocsDir/WoLFPSORTdoc/";

if( $justPrint ){
    (-e $tmpDir) || print "mkdir( $tmpDir,0777 )\n";
    (-e $htdocsDir)  || print "mkdir( $htdocsDir,0777 )\n";
    (-e $resultsDir) || print "mkdir( $resultsDir,0777 )\n";
    (-e $docDestDir) || print "mkdir( $docDestDir,0777 )\n";
}else{
    (-e $dataDir) || die "Error: the data directory: \"$dataDir\" does not exist\n";
    (-e $docSrcDir) || die "Error: the doc directory: \"$docSrcDir\" does not exist\n";

    (-e $tmpDir) || mkdir( $tmpDir,0777 );
    (-e $htdocsDir)  || mkdir( $htdocsDir,0777 );
    (-e $resultsDir) || mkdir( $resultsDir,0777 );
    (-e $docDestDir) || mkdir( $docDestDir,0777 );
}

# Output files
my $querySequenceFile = "$tmpDir/$baseName.fasta";
my $queryFeatureFile = "$tmpDir/$baseName.wolff";
my $psortVerboseOutputFile = "$resultsDir/$baseName.PSORTverboseOutput.html";
my $resultFile  = "$resultsDir/$baseName.html";
my $alignmentOutputFile = "alignment.$baseName.html";
my $alignmentOutputPath = "${resultsDir}$alignmentOutputFile";

# Data
my $weightFile = "$dataDir/${organismType}.wolfw";
my $trainingFile = "$dataDir/${organismType}.wolff";
my $datasetSequencesFile = "$dataDir/${organismType}.psort";
my $utilityMatrixFile = "$dataDir/${organismType}UtilityMatrix";


# programs
my $sequenceCleaner = "$cwd/checkFastaInput.pl";
my $featureComputer = "$cwd/psortModifiedForWolfFiles/psortModifiedForWoLF";
my $psort     = "$cwd/psortModifiedForWolfFiles/psortModifiedForWoLF";
my $wolf      = "$cwd/WoLFPSORTpredictAndAlign";
my $addAlignmentHtml = "$cwd/runAddAlignmentToHtml";

(-e $wolf) || die( "Error: Binary file: $wolf not found.\nPerhaps you need to copy the appropriate binary from the archeticture specific ones under $cwd/binByPlatform/?\n" );

(-e $addAlignmentHtml) || die( "Error: Binary file: $addAlignmentHtml not found.\nPerhaps you need to copy the appropriate binary from the archeticture specific ones under $cwd/binByPlatform/?\n" );

# The commands that will be executed
my $cleanerCommand = "$sequenceCleaner --html";
my $featureComputerCommand = "$featureComputer --outputForWoLF --noNormalization < $querySequenceFile";
my $psortVerboseCommand = "$psort -v --html $psortVerbosePredictionFlag $querySequenceFile";
my $wolfCommand = "$wolf $wolfFlag $resultsDir $baseName $organismType $dataDir/$organismType.wolfw $dataDir/$organismType.wolff $queryFeatureFile $dataDir/$organismType.wolfu $querySequenceFile $datasetSequencesFile";
my $addAlignmentCommand = "$addAlignmentHtml $datasetSequencesFile $resultFile $querySequenceFile $alignmentOutputFile $alignmentOutputPath";
my $copyDocHtmlCommand = "/bin/cp $docSrcDir/*.html $docDestDir/";


# Clean input
my @cleanerOutput = ("okay line");
$justPrint ? print "$cleanerCommand > $querySequenceFile\n\n"
    : (@cleanerOutput = `$cleanerCommand`);

my @cleanerWarningLines = grep {/^\#/} @cleanerOutput;
my @cleanerOkayOuputLines = grep {!/^\#/} @cleanerOutput;

if( !$justPrint && !@cleanerOkayOuputLines ){
    my $message = "Error: problem with sequence input\nDiagnostics from sequence cleaner are:\"@cleanerWarningLines\"";
    die( $message );
}

unless( $justPrint ){
    open SEQUENCE_FILE, ">$querySequenceFile" or die "Couldn't open $querySequenceFile: $!";
    print SEQUENCE_FILE @cleanerOutput;
    close SEQUENCE_FILE;
}


# Convert the Fasta file to WoLF's expected input
my $featureComputerOutput = "";
$justPrint ? print "$featureComputerCommand > $queryFeatureFile\n\n"
    : ($featureComputerOutput = `$featureComputerCommand`);


# Write output from featureComputer to .wolff file
unless( $justPrint ){
    open QUERY_FEATURE_FILE, ">$queryFeatureFile" or die "Error: Couldn't open $queryFeatureFile\n";
    print QUERY_FEATURE_FILE $featureComputerOutput;
    close QUERY_FEATURE_FILE;
}


if( $psortVerboseOutput ){
# Execute and store the output of the psort run
    my $psortOutput;
    if( $justPrint ){
	print "$psortVerboseCommand > $psortVerboseOutputFile\n\n";
    }else{
	# would like to be able to catch exceptions from psortVerboseCommand here...
	$psortOutput = `$psortVerboseCommand`; 

#       write the PSORT results out to file.
	open PSORT_OUTPUT, ">$psortVerboseOutputFile" or die "Can't open $psortVerboseOutputFile: $!";
	print PSORT_OUTPUT $psortOutput;
	close PSORT_OUTPUT;
    }
}



# Run WoLF
my $wolfOutput = "";
$justPrint ? print "$wolfCommand > $resultFile\n\n" 
    : ($wolfOutput = `$wolfCommand`);
    

# Print the WoLF results
unless( $justPrint ){
    open WOLF, ">$resultFile" or die "Can't open $resultFile: $!";
    print WOLF $wolfOutput;
    close WOLF;
}

# $addAlignmentCommand both reads from and writes to $resultFile.
my $alignmentAddedOutput;
$justPrint ? print "$addAlignmentCommand > $resultFile\n\n"
    : ($alignmentAddedOutput = `$addAlignmentCommand`);


unless( $justPrint ){
# Read the WoLF results so far and print them with alignment links added.
# also print error message if any.
    open WOLF, ">$resultFile" or die "Can't open $resultFile: $!";
    print WOLF "<HTML><HEAD><TITLE>WoLF PSORT Prediction</TITLE></HEAD>\n";
    print WOLF @cleanerWarningLines;
    print WOLF $alignmentAddedOutput;
    close WOLF;
}

# Clean up temporary files
unless( $preserveTemporaryFiles ){
    $justPrint ? print "rm $querySequenceFile\n\n" : unlink $querySequenceFile;
    $justPrint ? print "rm $queryFeatureFile\n\n" : unlink $queryFeatureFile;
}

$justPrint ? print "$copyDocHtmlCommand\n" : system( $copyDocHtmlCommand );

=pod

=head1 NAME

runWolfPsortHtmlTables - Run WoLF PSORT subcellular localization prediction on input sequences and output relatively detailed html files as output.

=head1 SYNOPSIS

B<runWolfPsortHtmlTables> [I<OPTIONS>] I<organismType> I<outputDir> [I<queryName>]

B<runWolfPsortHtmlTables> (B<--usage>|B<--help>|B<--man>)

Pipe sequences in from standard in.

=head1 DESCRIPTION

Run WoLF PSORT subcellular localization prediction on input sequences and write
results as html to files under the I<outputDir> directory.

Input in fasta form is expected from standard in.

The summary output is written to the file I<outputDir>/htdocs/results/I<queryName>.html. The output looks roughly like

  seq1 details extr_plas: 11.5, plas: 11, extr: 10, E.R.: 4, lyso: 4, pero: 1.5, cyto_pero: 1.5, vacu: 1
  seq2 details extr: 25, lyso: 3, plas: 2, nucl: 1, E.R.: 1
  seq3 details extr: 31, lyso: 1

Tables showing the values of each localization feature for the query
and nearest neighbor sequences can be found by following the "details" link.

Each line contains a several localization classes with their scores. The localization classes are:

        abbrev.  site                GO cellular component number
        extr extracellular           0005576, 0005618
        cysk cytoskeleton            0005856
        E.R. endoplasmic reticulum   0005783
        golg Golgi apparatus         0005794
        mito mitochondria            0005739
        nucl nucleus                 0005634
        plas plasma membrane         0005886
        pero peroxisome              0005777
        vacu vacuolar membrane       0005774
        chlo chloroplast             0009507, 0009543
        lyso lysozyme                0005764

The GO cellular component number is given for here, but most entries
in our current dataset are actually based on the Uniprot and depend on
that annotation.  Localization classes including underscores indicate
the possibility of localizing to two sites, for example "cyto_nucl"
indicates proteins which can localize to both the cytosol and/or the
nucleus. No distinction is made between conditional and constitutive
dual localization.

=head1 OPTIONS

=over 8

=item B<-n>, B<--just-print>

Print the commands that should be executed without actually executing them. Mainly useful for debugging. Mnemonic: like make -n

=item B<-p>, B<--preserve-temporary-files>

Do not remove temporary files that are generated (and normally deleted) during processing.

=item B<--no-classical-psort-prediction>

Suppress classical PSORT II kNN prediction. Skip the last step of
running classical PSORT II, in which standard kNN is used to make a
localization prediction. This prediction is redundant to the (also kNN
based) main WoLF PSORT prediction. It is also based on less data than
the WoLF PSORT prediction. In the future this may become the default
behavior.

=item B<--no-classical-psort-verbose-output>

Skip psort II verbose output entirely.

=back

=head1 ARGUMENTS

=over 8

=item I<organismType>

Type of the organism. Currently supported organism types are: "animal", "plant", and "fungi". This
determines which dataset is used for the prediction. Note that although the results may not be
interesting, the software does not care if the organism type matches the actual organism of
the protein.

=item I<outputDir>

Directory in which to write output files. This directory should exists before you run this command.

=item [I<queryName>] 

Sequence name to use for query sequence. Defaults to "query"

=back

=head1 EXAMPLES

=over 8

runWolfPsortHtmlTables animal outdir < hamster.fasta

=back

=head1 FILES

=over 8

=item ../data/animal.psort

=item ../data/fungi.psort

=item ../data/plant.psort

Dataset sequence data with localization site labels

=item ../data/animal.wolff

=item ../data/fungi.wolff

=item ../data/plant.wolff

Dataset localization feature values

=item ../data/animal.wolfw

=item ../data/fungi.wolfw

=item ../data/plant.wolfw

Feature weights

=item ../data/animal.wolfu

=item ../data/fungi.wolfu

=item ../data/plant.wolfu

Utility matrix. Stipulates the value of predicting a protein of localization class A to
to be of class B.

=back

=head2 OUTPUT FILES

=over 12

In this section, I<scriptDir> denotes the directory in which this
script resides, I<seqNo> represents the number (e.g. 1, 2, etc.) of
the input sequence when the query fasta stream contains multiple
sequences

=item I<outputDir>/htdocs/results/I<queryName>.html

The main html output page.

=item I<outputDir>/htdocs/results/I<queryName>.PSORTverboseOutput.html

Output of tradional PSORT in verbose mode.

=item I<outputDir>/htdocs/WoLFPSORTdoc/

Some general WoLF PSORT documentation.

=item I<outputDir>/htdocs/results/I<queryName>.detailedI<seqNo>.html

Detailed information, including tables showing the value of localization
features of the I<seqNo>th query and its most similar proteins in the dataset

=item I<outputDir>/htdocs/results/I<queryName>.alignmentI<seqNo>.html

Alignment of the I<seqNo>th query and its most similar proteins in the
dataset.  Similarity is based on localization features, which
correlates to but is different that standard sequence similarity.

=item I<outputDir>/htdocs/results/alignment.I<queryName>.html

Alignment of similar sequences in dataset (if present) based on global
sequence similarity. As of this writing I believe just a stub is output
because the sequence similarity step was time consuming and seemed to have
a bug.

=item I<outputDir>/htdocs/results/alignment.I<queryName>.html

=back

=head2 Temporary Files

=over 12

=item I<scriptDir>/tmp/I<queryName>.fasta

Holds input sequence after filtering with checkFastaInput.pl

=item  I<scriptDir>/tmp//query.wolff

Holds localization features computed for the input sequences.

=back

=head1 AUTHOR

Paul Horton <horton-p@aist.go.jp>

=head1 COPYRIGHT

This Script: Copyright (C) 2004-2006, Paul B. Horton & C.J. Collier, All Rights Reserved.

PSORT: Copyright (C) 1997, 2004-2006, Kenta Nakai & Paul B. Horton, All Rights Reserved.

=head1 REFERENCE

Paul Horton, Keun-Joon Park, Takeshi Obayashi & Kenta Nakai, "Protein Subcellular Localization Prediction with WoLF PSORT", Proceedings of I<the 4th Annual Asia Pacific Bioinformatics Conference APBC06>, Taipei, Taiwan. pp. 39-48, 2006.

=head1 SEE ALSO

L<http://wolfpsort.org/>

B<runWolfPsortHtmlSummary>

=cut
