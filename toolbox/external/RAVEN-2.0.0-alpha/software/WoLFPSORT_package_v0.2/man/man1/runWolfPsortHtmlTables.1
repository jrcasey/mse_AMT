.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "RUNWOLFPSORTHTMLTABLES 1"
.TH RUNWOLFPSORTHTMLTABLES 1 "2006-08-28" "User commands" "WoLF PSORT Package"
.SH "NAME"
runWolfPsortHtmlTables \- Run WoLF PSORT subcellular localization prediction on input sequences and output relatively detailed html files as output.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBrunWolfPsortHtmlTables\fR [\fI\s-1OPTIONS\s0\fR] \fIorganismType\fR \fIoutputDir\fR [\fIqueryName\fR]
.PP
\&\fBrunWolfPsortHtmlTables\fR (\fB\-\-usage\fR|\fB\-\-help\fR|\fB\-\-man\fR)
.PP
Pipe sequences in from standard in.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Run WoLF \s-1PSORT\s0 subcellular localization prediction on input sequences and write
results as html to files under the \fIoutputDir\fR directory.
.PP
Input in fasta form is expected from standard in.
.PP
The summary output is written to the file \fIoutputDir\fR/htdocs/results/\fIqueryName\fR.html. The output looks roughly like
.PP
.Vb 3
\&  seq1 details extr_plas: 11.5, plas: 11, extr: 10, E.R.: 4, lyso: 4, pero: 1.5, cyto_pero: 1.5, vacu: 1
\&  seq2 details extr: 25, lyso: 3, plas: 2, nucl: 1, E.R.: 1
\&  seq3 details extr: 31, lyso: 1
.Ve
.PP
Tables showing the values of each localization feature for the query
and nearest neighbor sequences can be found by following the \*(L"details\*(R" link.
.PP
Each line contains a several localization classes with their scores. The localization classes are:
.PP
.Vb 12
\&        abbrev.  site                GO cellular component number
\&        extr extracellular           0005576, 0005618
\&        cysk cytoskeleton            0005856
\&        E.R. endoplasmic reticulum   0005783
\&        golg Golgi apparatus         0005794
\&        mito mitochondria            0005739
\&        nucl nucleus                 0005634
\&        plas plasma membrane         0005886
\&        pero peroxisome              0005777
\&        vacu vacuolar membrane       0005774
\&        chlo chloroplast             0009507, 0009543
\&        lyso lysozyme                0005764
.Ve
.PP
The \s-1GO\s0 cellular component number is given for here, but most entries
in our current dataset are actually based on the Uniprot and depend on
that annotation.  Localization classes including underscores indicate
the possibility of localizing to two sites, for example \*(L"cyto_nucl\*(R"
indicates proteins which can localize to both the cytosol and/or the
nucleus. No distinction is made between conditional and constitutive
dual localization.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-n\fR, \fB\-\-just\-print\fR" 8
.IX Item "-n, --just-print"
Print the commands that should be executed without actually executing them. Mainly useful for debugging. Mnemonic: like make \-n
.IP "\fB\-p\fR, \fB\-\-preserve\-temporary\-files\fR" 8
.IX Item "-p, --preserve-temporary-files"
Do not remove temporary files that are generated (and normally deleted) during processing.
.IP "\fB\-\-no\-classical\-psort\-prediction\fR" 8
.IX Item "--no-classical-psort-prediction"
Suppress classical \s-1PSORT\s0 \s-1II\s0 kNN prediction. Skip the last step of
running classical \s-1PSORT\s0 \s-1II\s0, in which standard kNN is used to make a
localization prediction. This prediction is redundant to the (also kNN
based) main WoLF \s-1PSORT\s0 prediction. It is also based on less data than
the WoLF \s-1PSORT\s0 prediction. In the future this may become the default
behavior.
.IP "\fB\-\-no\-classical\-psort\-verbose\-output\fR" 8
.IX Item "--no-classical-psort-verbose-output"
Skip psort \s-1II\s0 verbose output entirely.
.SH "ARGUMENTS"
.IX Header "ARGUMENTS"
.IP "\fIorganismType\fR" 8
.IX Item "organismType"
Type of the organism. Currently supported organism types are: \*(L"animal\*(R", \*(L"plant\*(R", and \*(L"fungi\*(R". This
determines which dataset is used for the prediction. Note that although the results may not be
interesting, the software does not care if the organism type matches the actual organism of
the protein.
.IP "\fIoutputDir\fR" 8
.IX Item "outputDir"
Directory in which to write output files. This directory should exists before you run this command.
.IP "[\fIqueryName\fR]" 8
.IX Item "[queryName]"
Sequence name to use for query sequence. Defaults to \*(L"query\*(R"
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.RS 8
runWolfPsortHtmlTables animal outdir < hamster.fasta
.RE
.SH "FILES"
.IX Header "FILES"
.IP "../data/animal.psort" 8
.IX Item "../data/animal.psort"
.PD 0
.IP "../data/fungi.psort" 8
.IX Item "../data/fungi.psort"
.IP "../data/plant.psort" 8
.IX Item "../data/plant.psort"
.PD
Dataset sequence data with localization site labels
.IP "../data/animal.wolff" 8
.IX Item "../data/animal.wolff"
.PD 0
.IP "../data/fungi.wolff" 8
.IX Item "../data/fungi.wolff"
.IP "../data/plant.wolff" 8
.IX Item "../data/plant.wolff"
.PD
Dataset localization feature values
.IP "../data/animal.wolfw" 8
.IX Item "../data/animal.wolfw"
.PD 0
.IP "../data/fungi.wolfw" 8
.IX Item "../data/fungi.wolfw"
.IP "../data/plant.wolfw" 8
.IX Item "../data/plant.wolfw"
.PD
Feature weights
.IP "../data/animal.wolfu" 8
.IX Item "../data/animal.wolfu"
.PD 0
.IP "../data/fungi.wolfu" 8
.IX Item "../data/fungi.wolfu"
.IP "../data/plant.wolfu" 8
.IX Item "../data/plant.wolfu"
.PD
Utility matrix. Stipulates the value of predicting a protein of localization class A to
to be of class B.
.Sh "\s-1OUTPUT\s0 \s-1FILES\s0"
.IX Subsection "OUTPUT FILES"
.RS 12
In this section, \fIscriptDir\fR denotes the directory in which this
script resides, \fIseqNo\fR represents the number (e.g. 1, 2, etc.) of
the input sequence when the query fasta stream contains multiple
sequences
.RE
.IP "\fIoutputDir\fR/htdocs/results/\fIqueryName\fR.html" 12
.IX Item "outputDir/htdocs/results/queryName.html"
The main html output page.
.IP "\fIoutputDir\fR/htdocs/results/\fIqueryName\fR.PSORTverboseOutput.html" 12
.IX Item "outputDir/htdocs/results/queryName.PSORTverboseOutput.html"
Output of tradional \s-1PSORT\s0 in verbose mode.
.IP "\fIoutputDir\fR/htdocs/WoLFPSORTdoc/" 12
.IX Item "outputDir/htdocs/WoLFPSORTdoc/"
Some general WoLF \s-1PSORT\s0 documentation.
.IP "\fIoutputDir\fR/htdocs/results/\fIqueryName\fR.detailed\fIseqNo\fR.html" 12
.IX Item "outputDir/htdocs/results/queryName.detailedseqNo.html"
Detailed information, including tables showing the value of localization
features of the \fIseqNo\fRth query and its most similar proteins in the dataset
.IP "\fIoutputDir\fR/htdocs/results/\fIqueryName\fR.alignment\fIseqNo\fR.html" 12
.IX Item "outputDir/htdocs/results/queryName.alignmentseqNo.html"
Alignment of the \fIseqNo\fRth query and its most similar proteins in the
dataset.  Similarity is based on localization features, which
correlates to but is different that standard sequence similarity.
.IP "\fIoutputDir\fR/htdocs/results/alignment.\fIqueryName\fR.html" 12
.IX Item "outputDir/htdocs/results/alignment.queryName.html"
Alignment of similar sequences in dataset (if present) based on global
sequence similarity. As of this writing I believe just a stub is output
because the sequence similarity step was time consuming and seemed to have
a bug.
.IP "\fIoutputDir\fR/htdocs/results/alignment.\fIqueryName\fR.html" 12
.IX Item "outputDir/htdocs/results/alignment.queryName.html"
.Sh "Temporary Files"
.IX Subsection "Temporary Files"
.PD 0
.IP "\fIscriptDir\fR/tmp/\fIqueryName\fR.fasta" 12
.IX Item "scriptDir/tmp/queryName.fasta"
.PD
Holds input sequence after filtering with checkFastaInput.pl
.IP "\fIscriptDir\fR/tmp//query.wolff" 12
.IX Item "scriptDir/tmp//query.wolff"
Holds localization features computed for the input sequences.
.SH "AUTHOR"
.IX Header "AUTHOR"
Paul Horton <horton\-p@aist.go.jp>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This Script: Copyright (C) 2004\-2006, Paul B. Horton & C.J. Collier, All Rights Reserved.
.PP
\&\s-1PSORT:\s0 Copyright (C) 1997, 2004\-2006, Kenta Nakai & Paul B. Horton, All Rights Reserved.
.SH "REFERENCE"
.IX Header "REFERENCE"
Paul Horton, Keun-Joon Park, Takeshi Obayashi & Kenta Nakai, \*(L"Protein Subcellular Localization Prediction with WoLF \s-1PSORT\s0\*(R", Proceedings of \fIthe 4th Annual Asia Pacific Bioinformatics Conference \s-1APBC06\s0\fR, Taipei, Taiwan. pp. 39\-48, 2006.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
<http://wolfpsort.org/>
.PP
\&\fBrunWolfPsortHtmlSummary\fR
